# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run SonarQube
      run: mvn clean verify sonar:sonar -Dsonar.projectKey=${{secrets.SONAR_KEY}} -Dsonar.projectName=${{secrets.SONAR_NAME}} -Dsonar.host.url=${{secrets.SONAR_HOST}} -Dsonar.token=${{secrets.SONAR_TOKEN}}

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker image with Docker compose
      run: sudo docker-compose build

    - name: Push Docker image to Docker Hub
      run: |
          sudo docker-compose push

    - name: Copy files to server
      uses: appleboy/scp-action@master
      with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "."
          target: "/home/ubuntu/eureka"

    - name: Stop existing containers on port 80 and 8080
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_IP }}
        username: ${{ secrets.SSH_ID }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          ports_to_check=("80" "8080")
          for port in "${ports_to_check[@]}"; do
            existing_container=$(sudo lsof -i:$port -t)
            if [ ! -z "$existing_container" ]; then
              sudo docker stop $existing_container
              sudo docker rm $existing_container
            fi
          done

    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@master
      with:
       host: ${{ secrets.SSH_IP }}
       username: ${{ secrets.SSH_ID }}
       key: ${{ secrets.SSH_KEY }}
       port: ${{ secrets.SSH_PORT }}
       script: |
         cd /home/ubuntu/front
         sudo docker-compose pull
         sudo docker-compose down || true
         sudo docker-compose up -d

#    - name: Update dependency graph
#      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
